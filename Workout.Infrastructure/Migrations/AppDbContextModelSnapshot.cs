// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workout.Infrastructure.Data;

#nullable disable

namespace Workout.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Workout.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Strength",
                            Description = "An exercise that targets the chest, shoulders, and triceps.",
                            Name = "Push-up"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Strength",
                            Description = "A lower body exercise that targets the thighs and glutes.",
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Strength",
                            Description = "An upper body exercise that works the back and biceps.",
                            Name = "Pull-up"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Core",
                            Description = "A core exercise that targets the abdominals and lower back.",
                            Name = "Plank"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Strength",
                            Description = "A lower body exercise that works the legs and glutes.",
                            Name = "Lunge"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Strength",
                            Description = "An exercise that focuses on the biceps using weights.",
                            Name = "Bicep Curl"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Strength",
                            Description = "A strength exercise that targets the entire body, especially the back and legs.",
                            Name = "Deadlift"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Strength",
                            Description = "A chest exercise performed with a barbell or dumbbells.",
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Core",
                            Description = "An abdominal exercise that targets the upper abs.",
                            Name = "Crunch"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Cardio",
                            Description = "A full-body exercise that combines a squat, push-up, and jump.",
                            Name = "Burpee"
                        });
                });

            modelBuilder.Entity("Workout.Domain.Entities.ScheduleWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("scheduleWorkouts");
                });

            modelBuilder.Entity("Workout.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("workoutComments");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("workoutExercises");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("workoutPlans");
                });

            modelBuilder.Entity("Workout.Domain.Entities.ScheduleWorkout", b =>
                {
                    b.HasOne("Workout.Domain.Entities.WorkoutPlan", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutComments", b =>
                {
                    b.HasOne("Workout.Domain.Entities.WorkoutPlan", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("Workout.Domain.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workout.Domain.Entities.WorkoutPlan", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutPlan", b =>
                {
                    b.HasOne("Workout.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Workout.Domain.Entities.WorkoutPlan", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
